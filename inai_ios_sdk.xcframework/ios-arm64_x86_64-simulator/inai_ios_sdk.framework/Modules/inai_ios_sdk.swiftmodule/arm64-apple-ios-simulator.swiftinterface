// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name inai_ios_sdk
import AuthenticationServices
import Foundation
import MachO
import PassKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import inai_ios_sdk
@_hasMissingDesignatedInitializers public class InaiBreadCrumb : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class ValuesModel : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class InaiBreadCrumbDataModel : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CrashModel : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum Inai_Status : Swift.Int {
  case success
  case failed
  case canceled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Inai_PaymentStatus : Swift.Int {
  case success
  case failed
  case canceled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Inai_CardInfoStatus : Swift.Int {
  case success
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Inai_ValidateFieldsStatus : Swift.Int {
  case success
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Inai_InstallmentPlanStatus : Swift.Int {
  case success
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Inai_PaymentMethodStatus : Swift.Int {
  case success
  case failed
  case canceled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Inai_ExecuteStatus : Swift.Int {
  case success
  case failed
  case canceled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol InaiCheckoutDelegate {
  func paymentFinished(with result: inai_ios_sdk.Inai_PaymentResult)
}
public protocol InaiPaymentMethodDelegate {
  func paymentMethodSaved(with result: inai_ios_sdk.Inai_PaymentMethodResult)
}
public protocol InaiCardInfoDelegate {
  func cardInfoFetched(with result: inai_ios_sdk.Inai_CardInfoResult)
}
public protocol InaiValidateFieldsDelegate {
  func fieldsValidationFinished(with result: inai_ios_sdk.Inai_ValidateFieldsResult)
}
public protocol InaiInstallmentPlansDelegate {
  func installmentPlansFetched(with result: inai_ios_sdk.Inai_InstallmentPlansResult)
}
public protocol InaiExecuteDelegate {
  func executeFinished(with result: inai_ios_sdk.Inai_ExecuteResult)
}
public protocol InaiCardIdentificationDelegate {
  func onCardIdentification(with cardInfo: [Swift.String : Any])
}
public struct InaiApplePayRequestData {
  public var currencyCode: Swift.String
  public var countryCode: Swift.String
  public var merchantId: Swift.String
  public var productDescription: Swift.String
  public var orderAmount: Swift.String
  public var supportedNetworks: [PassKit.PKPaymentNetwork]
  public var canMakePayments: Swift.Bool
  public var canSetupCards: Swift.Bool
}
@objc public class InaiCheckout : ObjectiveC.NSObject {
  public var cardIdentificationDelegate: (any inai_ios_sdk.InaiCardIdentificationDelegate)?
  public init?(config: inai_ios_sdk.InaiConfig)
  public func presentCheckout(viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiCheckoutDelegate)
  public func addPaymentMethod(type: Swift.String, viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiPaymentMethodDelegate)
  public func presentPayWithPaymentMethod(paymentMethodId: Swift.String, viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiCheckoutDelegate)
  public func getCardInfo(cardNumber: Swift.String, viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiCardInfoDelegate)
  public func validateFields(paymentMethodOption: Swift.String, paymentDetails: [Swift.String : Any], viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiValidateFieldsDelegate)
  public func getInstallmentPlans(paymentMethodOption: Swift.String, paymentDetails: [Swift.String : Any], viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiInstallmentPlansDelegate)
  public func execute(payload: [Swift.String : Any], viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiExecuteDelegate)
  public func makePayment(paymentMethodOption: Swift.String, paymentDetails: [Swift.String : Any], viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiCheckoutDelegate)
  public func remove()
  public func disableCTA(paymentMethods: [Swift.String])
  public func enableCTA(paymentMethods: [Swift.String])
  public func updateCTA(ctaConfig: inai_ios_sdk.InaiCTAConfig)
  public static func convertPaymentTokenToDict(payment: PassKit.PKPayment) -> [Swift.String : Any]
  public static func getApplePaymentRequest(paymentRequestData: inai_ios_sdk.InaiApplePayRequestData) -> PassKit.PKPaymentRequest
  @objc deinit
}
extension inai_ios_sdk.InaiCheckout : inai_ios_sdk.CrashEyeDelegate {
}
prefix operator /
public enum InaiCrypto_EstimateStatus : Swift.Int {
  case success
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol InaiCryptoEstimateDelegate {
  func estimateReceived(with result: inai_ios_sdk.InaiCrypto_EstimateResult)
}
public struct InaiCrypto_EstimateResult {
  public var status: inai_ios_sdk.InaiCrypto_EstimateStatus
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.InaiCrypto_EstimateStatus = .failed, data: [Swift.String : Any] = [:])
}
public struct InaiCryptoPurchaseDetails : Swift.Encodable {
  public let token: Swift.String!
  public let cryptoCurrency: Swift.String!
  public let country: Swift.String!
  public let paymentMethodOption: Swift.String!
  public let amount: Swift.String!
  public let currency: Swift.String!
  public init(token: Swift.String!, cryptoCurrency: Swift.String!, country: Swift.String!, paymentMethodOption: Swift.String!, amount: Swift.String!, currency: Swift.String!)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class InaiCrypto {
  public static func getPurchaseEstimate(purchaseDetails: inai_ios_sdk.InaiCryptoPurchaseDetails, viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiCryptoEstimateDelegate)
  @objc deinit
}
public struct InaiConfig_Styles_Container : Swift.Codable {
  public init(background: Swift.String? = nil, backgroundColor: Swift.String? = nil, border: Swift.String? = nil, borderBottom: Swift.String? = nil, borderBottomColor: Swift.String? = nil, borderBottomLeftRadius: Swift.String? = nil, borderBottomRightRadius: Swift.String? = nil, borderBottomStyle: Swift.String? = nil, borderBottomWidth: Swift.String? = nil, borderColor: Swift.String? = nil, borderLeft: Swift.String? = nil, borderLeftColor: Swift.String? = nil, borderLeftStyle: Swift.String? = nil, borderLeftWidth: Swift.String? = nil, borderRadius: Swift.String? = nil, borderRight: Swift.String? = nil, borderRightColor: Swift.String? = nil, borderRightStyle: Swift.String? = nil, borderRightWidth: Swift.String? = nil, borderStyle: Swift.String? = nil, borderTop: Swift.String? = nil, borderTopColor: Swift.String? = nil, borderTopLeftRadius: Swift.String? = nil, borderTopRightRadius: Swift.String? = nil, borderTopStyle: Swift.String? = nil, borderTopWidth: Swift.String? = nil, borderWidth: Swift.String? = nil, boxShadow: Swift.String? = nil, color: Swift.String? = nil, webkitFontSmoothing: Swift.String? = nil, mozOsxFontSmoothing: Swift.String? = nil, fontFamily: Swift.String? = nil, fontStyle: Swift.String? = nil, fontSize: Swift.String? = nil, fontVariant: Swift.String? = nil, fontWeight: Swift.Int? = nil, fontSmoothing: Swift.String? = nil, height: Swift.String? = nil, letterSpacing: Swift.String? = nil, lineHeight: Swift.String? = nil, margin: Swift.String? = nil, marginBottom: Swift.String? = nil, marginLeft: Swift.String? = nil, marginRight: Swift.String? = nil, marginTop: Swift.String? = nil, outline: Swift.String? = nil, outlineOffset: Swift.String? = nil, padding: Swift.String? = nil, paddingBottom: Swift.String? = nil, paddingLeft: Swift.String? = nil, paddingRight: Swift.String? = nil, textDecoration: Swift.String? = nil, textShadow: Swift.String? = nil, textTransform: Swift.String? = nil, transition: Swift.String? = nil, width: Swift.String? = nil, display: Swift.String? = nil, alignItems: Swift.String? = nil, justifyContent: Swift.String? = nil, fill: Swift.String? = nil, clipPath: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InaiComponent_Styles : Swift.Codable {
  public init(component: Swift.String? = nil, style: inai_ios_sdk.InaiConfig_Styles_Container? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InaiConfig_Styles_Cta : Swift.Codable {
  public init(background: Swift.String? = nil, backgroundColor: Swift.String? = nil, border: Swift.String? = nil, borderBottom: Swift.String? = nil, borderBottomColor: Swift.String? = nil, borderBottomLeftRadius: Swift.String? = nil, borderBottomRightRadius: Swift.String? = nil, borderBottomStyle: Swift.String? = nil, borderBottomWidth: Swift.String? = nil, borderColor: Swift.String? = nil, borderLeft: Swift.String? = nil, borderLeftColor: Swift.String? = nil, borderLeftStyle: Swift.String? = nil, borderLeftWidth: Swift.String? = nil, borderRadius: Swift.String? = nil, borderRight: Swift.String? = nil, borderRightColor: Swift.String? = nil, borderRightStyle: Swift.String? = nil, borderRightWidth: Swift.String? = nil, borderStyle: Swift.String? = nil, borderTop: Swift.String? = nil, borderTopColor: Swift.String? = nil, borderTopLeftRadius: Swift.String? = nil, borderTopRightRadius: Swift.String? = nil, borderTopStyle: Swift.String? = nil, borderTopWidth: Swift.String? = nil, borderWidth: Swift.String? = nil, boxShadow: Swift.String? = nil, color: Swift.String? = nil, webkitFontSmoothing: Swift.String? = nil, mozOsxFontSmoothing: Swift.String? = nil, fontFamily: Swift.String? = nil, fontStyle: Swift.String? = nil, fontSize: Swift.String? = nil, fontVariant: Swift.String? = nil, fontWeight: Swift.Int? = nil, fontSmoothing: Swift.String? = nil, height: Swift.String? = nil, letterSpacing: Swift.String? = nil, lineHeight: Swift.String? = nil, margin: Swift.String? = nil, marginBottom: Swift.String? = nil, marginLeft: Swift.String? = nil, marginRight: Swift.String? = nil, marginTop: Swift.String? = nil, outline: Swift.String? = nil, outlineOffset: Swift.String? = nil, padding: Swift.String? = nil, paddingBottom: Swift.String? = nil, paddingLeft: Swift.String? = nil, paddingRight: Swift.String? = nil, textDecoration: Swift.String? = nil, textShadow: Swift.String? = nil, textTransform: Swift.String? = nil, transition: Swift.String? = nil, width: Swift.String? = nil, display: Swift.String? = nil, alignItems: Swift.String? = nil, justifyContent: Swift.String? = nil, fill: Swift.String? = nil, clipPath: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InaiConfig_Styles_ErrorText : Swift.Codable {
  public init(color: Swift.String? = nil, fontSize: Swift.String? = nil, fontWeight: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InaiConfig_Customer : Swift.Codable {
  public var id: Swift.String?
  public var email: Swift.String?
  public var phoneNumber: Swift.String?
  public init(id: Swift.String? = nil, email: Swift.String? = nil, phoneNumber: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InaiConfig_Styles : Swift.Codable {
  public init(container: inai_ios_sdk.InaiConfig_Styles_Container? = nil, cta: inai_ios_sdk.InaiConfig_Styles_Cta? = nil, errorText: inai_ios_sdk.InaiConfig_Styles_ErrorText? = nil, components: [inai_ios_sdk.InaiComponent_Styles]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Inai_Result {
  public var status: inai_ios_sdk.Inai_Status
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.Inai_Status = .canceled, data: [Swift.String : Any] = ["code": "PAYMENT_CANCELED", "message": "Payment Canceled by User"])
}
public struct Inai_PaymentResult {
  public var status: inai_ios_sdk.Inai_PaymentStatus
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.Inai_PaymentStatus = .canceled, data: [Swift.String : Any] = [:])
}
public struct Inai_PaymentMethodResult {
  public var status: inai_ios_sdk.Inai_PaymentMethodStatus
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.Inai_PaymentMethodStatus = .canceled, data: [Swift.String : Any] = [:])
}
public struct Inai_CardInfoResult {
  public var status: inai_ios_sdk.Inai_CardInfoStatus
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.Inai_CardInfoStatus = .failed, data: [Swift.String : Any] = [:])
}
public struct Inai_ValidateFieldsResult {
  public var status: inai_ios_sdk.Inai_ValidateFieldsStatus
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.Inai_ValidateFieldsStatus = .failed, data: [Swift.String : Any] = [:])
}
public struct Inai_InstallmentPlansResult {
  public var status: inai_ios_sdk.Inai_InstallmentPlanStatus
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.Inai_InstallmentPlanStatus = .failed, data: [Swift.String : Any] = [:])
}
public struct Inai_ExecuteResult {
  public var status: inai_ios_sdk.Inai_ExecuteStatus
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.Inai_ExecuteStatus = .failed, data: [Swift.String : Any] = [:])
}
public struct InaiConfig : Swift.Codable {
  public let token: Swift.String!
  public var orderId: Swift.String?
  public var planId: Swift.String?
  public var countryCode: Swift.String?
  public var customer: inai_ios_sdk.InaiConfig_Customer?
  public var presentationMode: inai_ios_sdk.InaiPresentationMode?
  public init(token: Swift.String!, orderId: Swift.String? = nil, planId: Swift.String? = nil, styles: inai_ios_sdk.InaiConfig_Styles? = nil, ctaText: Swift.String? = nil, timeout: Swift.Int? = nil, countryCode: Swift.String? = nil, changeLocation: Swift.String? = nil, redirectUrl: Swift.String? = nil, customer: inai_ios_sdk.InaiConfig_Customer? = nil, availablePaymentMethodOptions: [Swift.String]? = nil, usePaymentMethodOption: Swift.String? = nil, locale: Swift.String? = nil, presentationMode: inai_ios_sdk.InaiPresentationMode? = .standard)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InaiCTAConfig : Swift.Codable {
  public init(text: Swift.String? = nil, styles: inai_ios_sdk.InaiConfig_Styles? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol CrashEyeDelegate : ObjectiveC.NSObjectProtocol {
  func crashEyeDidCatchCrash(with model: inai_ios_sdk.CrashModel)
}
extension inai_ios_sdk.CrashEyeDelegate {
  public func crashEyeDidCatchCrash(with model: inai_ios_sdk.CrashModel)
}
@objc @_inheritsConvenienceInitializers public class CrashEye : ObjectiveC.NSObject {
  public static var isOpen: Swift.Bool {
    get
  }
  public static var token: Swift.String {
    get
  }
  public static var orderId: Swift.String {
    get
  }
  public static var countryCode: Swift.String? {
    get
  }
  public static var breadCrumb: [inai_ios_sdk.ValuesModel]
  open class func add(token: Swift.String, orderId: Swift.String, countryCode: Swift.String?, delegate: any inai_ios_sdk.CrashEyeDelegate)
  open class func remove(delegate: any inai_ios_sdk.CrashEyeDelegate)
  @objc override dynamic public init()
  @objc deinit
}
public struct InaiPayoutsConfig : Swift.Codable {
  public let token: Swift.String!
  public var countryCode: Swift.String?
  public let sessionToken: Swift.String?
  public let locale: Swift.String?
  public let presentationMode: inai_ios_sdk.InaiPresentationMode?
  public init(token: Swift.String!, countryCode: Swift.String? = nil, sessionToken: Swift.String? = nil, locale: Swift.String? = nil, presentationMode: inai_ios_sdk.InaiPresentationMode? = .standard)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Inai_PayoutMethodResult {
  public var status: inai_ios_sdk.Inai_PayoutMethodStatus
  public var data: [Swift.String : Any]
  public init(status: inai_ios_sdk.Inai_PayoutMethodStatus = .canceled, data: [Swift.String : Any] = [:])
}
public enum InaiPresentationMode : Swift.String, Swift.Codable {
  case standard
  case fullScreen
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol InaiAddPayoutMethodDelegate {
  func payoutMethodAdded(with result: inai_ios_sdk.Inai_PayoutMethodResult)
}
public enum Inai_PayoutMethodStatus : Swift.Int {
  case success
  case failed
  case canceled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class InaiPayouts {
  public init?(config: inai_ios_sdk.InaiPayoutsConfig)
  public func validateFields(payoutMethodOption: Swift.String, payoutMethodDetails: [Swift.String : Any], viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiValidateFieldsDelegate)
  public func addPayoutMethod(payoutMethodOption: Swift.String, payoutMethodDetails: [Swift.String : Any], viewController: UIKit.UIViewController, delegate: any inai_ios_sdk.InaiAddPayoutMethodDelegate)
  @objc deinit
}
extension inai_ios_sdk.Inai_Status : Swift.Equatable {}
extension inai_ios_sdk.Inai_Status : Swift.Hashable {}
extension inai_ios_sdk.Inai_Status : Swift.RawRepresentable {}
extension inai_ios_sdk.Inai_PaymentStatus : Swift.Equatable {}
extension inai_ios_sdk.Inai_PaymentStatus : Swift.Hashable {}
extension inai_ios_sdk.Inai_PaymentStatus : Swift.RawRepresentable {}
extension inai_ios_sdk.Inai_CardInfoStatus : Swift.Equatable {}
extension inai_ios_sdk.Inai_CardInfoStatus : Swift.Hashable {}
extension inai_ios_sdk.Inai_CardInfoStatus : Swift.RawRepresentable {}
extension inai_ios_sdk.Inai_ValidateFieldsStatus : Swift.Equatable {}
extension inai_ios_sdk.Inai_ValidateFieldsStatus : Swift.Hashable {}
extension inai_ios_sdk.Inai_ValidateFieldsStatus : Swift.RawRepresentable {}
extension inai_ios_sdk.Inai_InstallmentPlanStatus : Swift.Equatable {}
extension inai_ios_sdk.Inai_InstallmentPlanStatus : Swift.Hashable {}
extension inai_ios_sdk.Inai_InstallmentPlanStatus : Swift.RawRepresentable {}
extension inai_ios_sdk.Inai_PaymentMethodStatus : Swift.Equatable {}
extension inai_ios_sdk.Inai_PaymentMethodStatus : Swift.Hashable {}
extension inai_ios_sdk.Inai_PaymentMethodStatus : Swift.RawRepresentable {}
extension inai_ios_sdk.Inai_ExecuteStatus : Swift.Equatable {}
extension inai_ios_sdk.Inai_ExecuteStatus : Swift.Hashable {}
extension inai_ios_sdk.Inai_ExecuteStatus : Swift.RawRepresentable {}
extension inai_ios_sdk.InaiCrypto_EstimateStatus : Swift.Equatable {}
extension inai_ios_sdk.InaiCrypto_EstimateStatus : Swift.Hashable {}
extension inai_ios_sdk.InaiCrypto_EstimateStatus : Swift.RawRepresentable {}
extension inai_ios_sdk.InaiPresentationMode : Swift.Equatable {}
extension inai_ios_sdk.InaiPresentationMode : Swift.Hashable {}
extension inai_ios_sdk.InaiPresentationMode : Swift.RawRepresentable {}
extension inai_ios_sdk.Inai_PayoutMethodStatus : Swift.Equatable {}
extension inai_ios_sdk.Inai_PayoutMethodStatus : Swift.Hashable {}
extension inai_ios_sdk.Inai_PayoutMethodStatus : Swift.RawRepresentable {}
